// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
package com.cloud.baremetal.manager;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.ejb.Local;
import javax.inject.Inject;
import javax.naming.ConfigurationException;

import com.cloud.host.DetailVO;
import com.cloud.utils.db.QueryBuilder;
import com.cloud.utils.db.SearchCriteria;
import com.cloud.utils.exception.CloudRuntimeException;
import com.cloud.utils.fsm.StateMachine2;
import com.cloud.vm.VMInstanceVO;
import com.cloud.vm.dao.VMInstanceDao;
import org.apache.cloudstack.api.BaremetalProvisionDoneNotificationCmd;
import org.apache.log4j.Logger;
import org.apache.cloudstack.api.AddBaremetalHostCmd;
import org.apache.cloudstack.api.AddMoonshotChassisCmd;
import org.apache.cloudstack.api.ApiConstants;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;

import citrix.moonshot.MoonshotClient;
import citrix.moonshot.models.Node;
import com.cloud.baremetal.database.moonshot.MoonshotChassisDao;
import com.cloud.baremetal.database.moonshot.MoonshotChassisVO;
import com.cloud.baremetal.database.moonshot.MoonshotNodeDao;
import com.cloud.baremetal.database.moonshot.MoonshotNodeVO;
import com.cloud.baremetal.networkservice.MoonshotChassisResponse;
import com.cloud.dc.ClusterVO;
import com.cloud.dc.dao.ClusterDao;
import com.cloud.exception.DiscoveryException;
import com.cloud.exception.InvalidParameterValueException;
import com.cloud.host.HostVO;
import com.cloud.host.dao.HostDao;
import com.cloud.host.dao.HostDetailsDao;
import com.cloud.hypervisor.Hypervisor.HypervisorType;
import com.cloud.resource.ResourceManager;
import com.cloud.utils.component.ManagerBase;
import com.cloud.utils.fsm.StateListener;
import com.cloud.vm.VirtualMachine;
import com.cloud.vm.VirtualMachine.Event;
import com.cloud.vm.VirtualMachine.State;
import org.apache.cloudstack.api.UpdateMoonshotChassisCmd;

@Local(value = {BaremetalManager.class})
public class BaremetalManagerImpl extends ManagerBase implements BaremetalManager, StateListener<State, VirtualMachine.Event, VirtualMachine> {
    private static final Logger s_logger = Logger.getLogger(BaremetalManagerImpl.class);

    @Inject
    protected HostDao _hostDao;
    @Inject
    protected VMInstanceDao vmDao;
    @Inject
    protected HostDetailsDao detailsDao;
    @Inject
    protected MoonshotChassisDao _moonshotChassisDao;
    @Inject
    protected MoonshotNodeDao _moonshotNodeDao;
    @Inject
    public ResourceManager _resourceManager;
    @Inject
    public ClusterDao _clusterDao;

    @Override
    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {
        VirtualMachine.State.getStateMachine().registerListener(this);
        return true;
    }

    @Override
    public boolean start() {
        return true;
    }

    @Override
    public boolean stop() {
        return true;
    }

    @Override
    public String getName() {
        return "Baremetal Manager";
    }

    @Override
    public boolean preStateTransitionEvent(State oldState, Event event, State newState, VirtualMachine vo, boolean status, Object opaque) {
        return false;
    }

    @Override
    public boolean postStateTransitionEvent(StateMachine2.Transition<State, Event> transition, VirtualMachine vo, boolean status, Object opaque) {
      State newState = transition.getToState();
      State oldState = transition.getCurrentState();
      if (newState != State.Starting && newState != State.Error && newState != State.Expunging) {
        return true;
      }

      if (vo.getHypervisorType() != HypervisorType.BareMetal) {
        return true;
      }

      HostVO host = _hostDao.findById(vo.getHostId());
      if (host == null) {
        s_logger.debug("Skip oldState " + oldState + " to " + "newState " + newState + " transimtion");
        return true;
      }
      _hostDao.loadDetails(host);

      if (newState == State.Starting) {
        host.setDetail("vmName", vo.getInstanceName());
        s_logger.debug("Add vmName " + host.getDetail("vmName") + " to host " + host.getId() + " details");
      } else {
        if (host.getDetail("vmName") != null && host.getDetail("vmName").equalsIgnoreCase(vo.getInstanceName())) {
          s_logger.debug("Remove vmName " + host.getDetail("vmName") + " from host " + host.getId() + " details");
          host.getDetails().remove("vmName");
        }
      }
      _hostDao.saveDetails(host);

      return true;
    }

  @Override
    public List<Class<?>> getCommands() {
        List<Class<?>> cmds = new ArrayList<Class<?>>();
        cmds.add(AddBaremetalHostCmd.class);
        cmds.add(BaremetalProvisionDoneNotificationCmd.class);
        cmds.add(AddMoonshotChassisCmd.class);
        cmds.add(UpdateMoonshotChassisCmd.class);
        return cmds;
    }

    @Override
    public void notifyProvisionDone(BaremetalProvisionDoneNotificationCmd cmd) {
        QueryBuilder<HostVO> hq = QueryBuilder.create(HostVO.class);
        hq.and(hq.entity().getPrivateMacAddress(), SearchCriteria.Op.EQ, cmd.getMac());
        HostVO host = hq.find();
        if (host == null) {
            throw new CloudRuntimeException(String.format("cannot find host[mac:%s]", cmd.getMac()));
        }

        _hostDao.loadDetails(host);
        String vmName = host.getDetail("vmName");
        if (vmName == null) {
            throw new CloudRuntimeException(String.format("cannot find any baremetal instance running on host[mac:%s]", cmd.getMac()));
        }

        QueryBuilder<VMInstanceVO> vmq = QueryBuilder.create(VMInstanceVO.class);
        vmq.and(vmq.entity().getInstanceName(), SearchCriteria.Op.EQ, vmName);
        VMInstanceVO vm = vmq.find();

        if (vm == null) {
            throw new CloudRuntimeException(String.format("cannot find baremetal instance[name:%s]", vmName));
        }

        if (State.Starting != vm.getState()) {
            throw new CloudRuntimeException(String.format("baremetal instance[name:%s, state:%s] is not in state of Starting", vmName, vm.getState()));
        }

        vm.setState(State.Running);
        vm.setLastHostId(vm.getHostId());
        vmDao.update(vm.getId(), vm);
        s_logger.debug(String.format("received baremetal provision done notification for vm[id:%s name:%s] running on host[mac:%s, ip:%s]",
                vm.getId(), vm.getInstanceName(), host.getPrivateMacAddress(), host.getPrivateIpAddress()));
    }

    @Override
    public MoonshotChassisResponse updateMoonshotChassis(UpdateMoonshotChassisCmd cmd) {
        s_logger.debug("Entering updateMoonshotChassis");

        MoonshotChassisVO moonshotChassis = _moonshotChassisDao.findByUuid(cmd.getChassisId());
        if(moonshotChassis == null) {
            moonshotChassis = _moonshotChassisDao.findById(Long.valueOf(cmd.getChassisId()));
        }

        if(moonshotChassis == null) {
            throw new CloudRuntimeException(String.format("Moonshot chassis with id: %s does not exist", cmd.getChassisId()));
        }

        try {
            MoonshotClient moonshotClient = new MoonshotClient(moonshotChassis.getUsername(), cmd.getPassword(), moonshotChassis.getUrl(), "https", 443);
            List<Node> nodes = moonshotClient.getAllNodes();
            if(nodes != null && !nodes.isEmpty()) {

                List<Node> nodesToBeImported = new ArrayList<Node>();

                for(Node node : nodes) {
                    String nodeMac = node.getMac()[0];
                    MoonshotNodeVO moonshotNodeVo = _moonshotNodeDao.findByMacAddress(nodeMac);

                    if(moonshotNodeVo == null) { //new node, import
                        nodesToBeImported.add(node);
                    } else { // node exists

                        if(!moonshotNodeVo.getShortName().equals(node.getShortName())) { //node location updated

                            DetailVO hostDetail = detailsDao.findDetail(moonshotNodeVo.getHostId(), BaremetalManager.CartridgeNodeLocation);
                            if(hostDetail != null) {
                                hostDetail.setValue(node.getShortName());
                                detailsDao.update(hostDetail.getId(), hostDetail); //update host details

                                moonshotNodeVo.setCartridge(String.valueOf(node.getCartridge()));
                                moonshotNodeVo.setNode(String.valueOf(node.getNode()));
                                _moonshotNodeDao.update(moonshotNodeVo.getId(), moonshotNodeVo); //update moonshot nodes
                            }
                        }

                    }

                }

                if(!nodesToBeImported.isEmpty()) {
                    MoonshotClient client = new MoonshotClient(moonshotChassis.getUsername(), cmd.getPassword(), moonshotChassis.getUrl(), "https", 443);
                    //Persist Moonshot nodes
                    List<MoonshotNodeVO> moonshotNodes = persistMoonshotNodes(nodesToBeImported, moonshotChassis.getId(), client);
                    //Create corresponding hosts
                    createHosts(moonshotNodes, cmd.getHostTag(), String.valueOf(moonshotChassis.getClusterId()), moonshotChassis.getUrl(), moonshotChassis.getUsername(), cmd.getPassword());
                }

            } else {
                s_logger.debug(String.format("No new nodes found in chassis with url %s", moonshotChassis.getUrl()));
            }
        } catch (ConfigurationException e) {
            throw new CloudRuntimeException(e);
        }


        MoonshotChassisResponse resp = new MoonshotChassisResponse();
        resp.setUuid(moonshotChassis.getUuid());
        resp.setName(moonshotChassis.getName());
        resp.setUrl(moonshotChassis.getUrl());

        return resp;
    }

    @Override
    public MoonshotChassisResponse addMoonshotChassis(AddMoonshotChassisCmd cmd) {
        s_logger.debug("API: addMoonshotChassis");

        MoonshotChassisVO moonshotChassis = _moonshotChassisDao.findByUrl(cmd.getUrl());

        if(moonshotChassis != null) {
            throw new CloudRuntimeException(String.format("Moonshot chassis with url: %s already exists", cmd.getUrl()));
        }

        URI uri = null;

        try {
            uri = new URI(cmd.getUrl());
        } catch (URISyntaxException e1) {
            throw new CloudRuntimeException("Error in parsing url", e1);
        }

        MoonshotClient moonshotClient = null;
        try {
            moonshotClient = new MoonshotClient(cmd.getUsername(), cmd.getPassword(), uri.getHost(), "https", 443);
        } catch (ConfigurationException e) {
            throw new CloudRuntimeException("Could not configure Moonshot Client", e);
        }

        List<Node> nodes = moonshotClient.getAllNodes();

        if(nodes == null || nodes.isEmpty()) {
            throw new CloudRuntimeException("No nodes found on the chassis, please make sure you have at least one cartridge while adding");
        }

        MoonshotChassisVO moonshotChassisVO = new MoonshotChassisVO();
        moonshotChassisVO.setName(cmd.getName());
        moonshotChassisVO.setUsername(cmd.getUsername());
        moonshotChassisVO.setUrl(cmd.getUrl());
        moonshotChassisVO.setClusterId(Long.valueOf(cmd.getClusterId()));

        moonshotChassisVO = _moonshotChassisDao.persist(moonshotChassisVO);
        s_logger.debug("Moonshot chassis id:" + moonshotChassisVO.getId());

        List<MoonshotNodeVO> moonshotNodes = new ArrayList<MoonshotNodeVO>();

        moonshotNodes = persistMoonshotNodes(nodes, moonshotChassisVO.getId(), moonshotClient);

        if(Boolean.valueOf(cmd.getAddHosts())) {
            s_logger.debug("Creating hosts");
            if(moonshotNodes != null && !moonshotNodes.isEmpty()) {
                List<HostVO> hosts = createHosts(moonshotNodes, cmd.getHostTag(), cmd.getClusterId(), cmd.getUrl(), cmd.getUsername(), cmd.getPassword());
                if(hosts != null && !hosts.isEmpty()) {
                    s_logger.debug("Total Hosts" + hosts.size());
                } else {
                    s_logger.debug("No host is discovered");
                }
            }
        } else {
            s_logger.debug("Not creating hosts, as false is passed in command");
        }

        MoonshotChassisResponse resp = new MoonshotChassisResponse();
        resp.setUuid(moonshotChassisVO.getUuid());
        resp.setName(moonshotChassisVO.getName());
        resp.setUrl(moonshotChassisVO.getUrl());

        return resp;
    }

    private List<MoonshotNodeVO> persistMoonshotNodes(List<Node> nodes, long chassisId, MoonshotClient client) {
        List<MoonshotNodeVO> moonshotNodes = new ArrayList<MoonshotNodeVO>();
        int mbsInGbs = 1024;
        if(nodes != null && !nodes.isEmpty()) {
            for(Node n : nodes) {
                s_logger.debug("Processing node: " + n.getMac()[0] + " " + n.getMac()[1] + " " + n.getShortName());
                Node fullNode = client.getNode(n.getShortName()); //getAllNode does not give all the data!
                MoonshotNodeVO moonshotNode = new MoonshotNodeVO();
                moonshotNode.setMoonshotChassisId(chassisId);
                moonshotNode.setCartridge(String.valueOf(n.getCartridge()));
                moonshotNode.setNode(String.valueOf(n.getNode()));
                moonshotNode.setNoOfCores(fullNode.getNoOfCores());
                moonshotNode.setMemory(n.getMemory() * mbsInGbs);
                moonshotNode.setMaxClockSpeed(fullNode.getMaxClockSpeed());
                moonshotNode.setMacAddress(n.getMac()[0]);
                moonshotNode.setSecondaryMacAddress(n.getMac()[1]);
                moonshotNode = _moonshotNodeDao.persist(moonshotNode);
                moonshotNodes.add(moonshotNode);
                s_logger.debug("Persisted node id: " + moonshotNode.getId());
            }
        } else {
            s_logger.debug("No Moonshot nodes found!");
        }
        return moonshotNodes;
    }

    private List<HostVO> createHosts(List<MoonshotNodeVO> moonshotNodes, String hostTag, String clusterId, String url, String username, String password) {
        List<HostVO> hosts = new ArrayList<HostVO>();
        for(MoonshotNodeVO node : moonshotNodes) {
            String cartridgeNumber = node.getCartridge();
            String nodeNumber = node.getNode();
            s_logger.debug("Creating hosts for node: " + node.getId() + " c" + cartridgeNumber + "n" + nodeNumber);
            Map<String, String> params = new HashMap<String, String>();
            params.put("hostmac", node.getMacAddress());
            params.put("clustertype", "CloudManaged");
            params.put("cpuspeed", String.valueOf(node.getMaxClockSpeed()));
            params.put("cpunumber", String.valueOf(node.getNoOfCores()));
            params.put("memory", String.valueOf(node.getMemory()));
            //params.put("cartridgeNumber", cartridgeNumber);
            //params.put("nodeNumber", nodeNumber);
            params.put(BaremetalManager.CartridgeNodeLocation, node.getShortName());
            params.put(ApiConstants.BAREMETAL_PROVIDER, BaremetalProvider.MOONSHOT.toString());
            List<String> tags = new ArrayList<String>();
            tags.add(hostTag);
            ClusterVO clusterVO =  _clusterDao.findById(Long.valueOf(clusterId));

            try {
                //String url = cmd.getUrl().replace("https", "http");
                List<HostVO> discoveredHosts = _resourceManager.discoverHostsFull(clusterVO.getDataCenterId(), clusterVO.getPodId(), clusterVO.getId(), null, url, username, password, "BareMetal", tags, params, false);
                if(discoveredHosts != null && !discoveredHosts.isEmpty()) {
                    node.setHostId(discoveredHosts.get(0).getId());
                    _moonshotNodeDao.persist(node);
                    hosts.addAll(discoveredHosts);
                }

            } catch (InvalidParameterValueException | IllegalArgumentException
                    | DiscoveryException e) {
                s_logger.error("Error while creating hosts for moonshot node" + node.getId() , e);
            }
        }
        return hosts;

    }

}
